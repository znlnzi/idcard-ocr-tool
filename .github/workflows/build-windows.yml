name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'  # 使用兼容性更好的Python版本
        
    - name: Install Tesseract OCR
      run: |
        # 使用chocolatey安装Tesseract OCR
        Write-Host "Installing Tesseract OCR via chocolatey..."
        choco install tesseract --yes --force
        
        # 刷新环境变量
        refreshenv
        
        # 找到Tesseract安装路径
        $tessPath = ""
        $possiblePaths = @(
          "C:\ProgramData\chocolatey\lib\tesseract\tools",
          "C:\Program Files\Tesseract-OCR",
          "C:\Program Files (x86)\Tesseract-OCR"
        )
        
        foreach ($path in $possiblePaths) {
          if (Test-Path "$path\tesseract.exe") {
            $tessPath = $path
            Write-Host "Found Tesseract at: $tessPath"
            break
          }
        }
        
        if ($tessPath -eq "") {
          Write-Host "Tesseract not found in expected locations, searching..."
          $tessExe = Get-ChildItem -Path "C:\" -Name "tesseract.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($tessExe) {
            $tessPath = Split-Path $tessExe.FullName
            Write-Host "Found Tesseract at: $tessPath"
          }
        }
        
        if ($tessPath -ne "") {
          # 添加到PATH
          echo "$tessPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH += ";$tessPath"
          
          # 设置tessdata目录
          $tessDataDir = "$tessPath\tessdata"
          if (!(Test-Path $tessDataDir)) {
            New-Item -ItemType Directory -Path $tessDataDir -Force
          }
          
          # 下载中文语言包
          Write-Host "Downloading Chinese language pack..."
          try {
            Invoke-WebRequest -Uri "https://github.com/tesseract-ocr/tessdata/raw/main/chi_sim.traineddata" -OutFile "$tessDataDir\chi_sim.traineddata"
            Write-Host "Chinese language pack downloaded successfully"
          } catch {
            Write-Host "Failed to download Chinese language pack: $($_.Exception.Message)"
          }
          
          # 验证Tesseract安装
          Write-Host "Verifying Tesseract installation..."
          & "$tessPath\tesseract.exe" --version
          
          # 列出可用语言
          Write-Host "Available languages:"
          & "$tessPath\tesseract.exe" --list-langs
          
        } else {
          Write-Host "ERROR: Could not find Tesseract installation"
          exit 1
        }
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build executable
      run: |
        python build.py
        
    - name: Verify build results
      run: |
        Write-Host "Checking build results..."
        
        # 检查是否生成了EXE文件
        if (Test-Path "dist\身份证信息提取工具.exe") {
          $exeSize = (Get-Item "dist\身份证信息提取工具.exe").Length
          Write-Host "✅ EXE file generated successfully: $($exeSize / 1MB) MB"
          
          # 检查文件属性
          $fileInfo = Get-Item "dist\身份证信息提取工具.exe"
          Write-Host "File details:"
          Write-Host "  - Size: $($fileInfo.Length) bytes"
          Write-Host "  - Created: $($fileInfo.CreationTime)"
          Write-Host "  - Modified: $($fileInfo.LastWriteTime)"
          
        } else {
          Write-Host "❌ EXE file not found!"
          exit 1
        }
        
        # 检查是否有release目录
        if (Test-Path "release") {
          $releaseFiles = Get-ChildItem "release" -Recurse
          Write-Host "✅ Release package contains $($releaseFiles.Count) files"
        } else {
          Write-Host "⚠️ Release directory not found"
        }
        
        # 列出dist目录内容
        Write-Host "📁 dist/ directory contents:"
        Get-ChildItem "dist" | ForEach-Object {
          Write-Host "  - $($_.Name) ($($_.Length) bytes)"
        }
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: |
          dist/*.exe
          release/
        retention-days: 30
        
    - name: Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.exe
          release/*.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}